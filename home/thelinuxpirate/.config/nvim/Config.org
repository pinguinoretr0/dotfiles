#+TITLE: Neovim Config In Org
* Scripts:
#+BEGIN_SRC sh :tangle ~/.config/nvim/setup.sh
  echo "Installing the \"Packer\" Plugin Manager..."
  git clone --depth 1 https://github.com/wbthomason/packer.nvim ~/.local/share/nvim/site/pack/packer/start/packer.nvim
  echo "Completed the installation"
#+END_SRC

* SRC:
** ~/Init.lua
#+BEGIN_SRC lua :tangle ~/.config/nvim/init.lua
require("src")
#+END_SRC

** SRC/Init.lua
#+BEGIN_SRC lua :tangle ~/.config/nvim/lua/src/init.lua
require("src.keymap")
require("src.remap")
require("src.set")
require("src.treesitter")
#+END_SRC

** SRC/Keymap.lua
#+BEGIN_SRC lua :tangle ~/.config/nvim/lua/src/keymap.lua
local M = {}

local function bind(op, outer_opts)
    outer_opts = outer_opts or {noremap = true}
    return function(lhs, rhs, opts)
            opts = vim.tbl_extend("force",
                outer_opts,
                opts or {} 
        )
        vim.keymap.set(op, lhs, rhs, opts)
  end
end

M.nmap = bind("n", {noremap = false})

M.nnoremap = bind("n")
M.vnoremap = bind("v")
M.xnoremap = bind("x")
M.inoremap = bind("i")

return M
#+END_SRC

** SRC/Packer.lua
#+BEGIN_SRC lua :tangle ~/.config/nvim/lua/src/packer.lua
    -- Only required if you have packer configured as `opt`
    vim.cmd [[packadd packer.nvim]]

    return require('packer').startup(function(use)
      -- Packer can manage itself
      use 'wbthomason/packer.nvim'
      use 'Mofiqul/dracula.nvim'
      use 'habamax/vim-godot'

      use {
	    'nvim-treesitter/nvim-treesitter',
	    run = ':TSUpdate'
      }

      use {'nvim-orgmode/orgmode', config = function()
      require('orgmode').setup{} }

  end)
#+END_SRC

** SRC/Remap.lua
#+BEGIN_SRC lua :tangle ~/.config/nvim/lua/src/remap.lua
local nnoremap = require("src.keymap").nnoremap
local api = vim.api

nnoremap("<leader>", "<cmd>Ex<CR>")
#+END_SRC

** SRC/Set.lua
#+BEGIN_SRC lua :tangle ~/.config/nvim/lua/src/set.lua
-- Local Variables:
local opt = vim.opt
local g = vim.g

-- Actual Settings:
opt.guicursor = ""
opt.nu = false
opt.relativenumber = true
opt.tabstop = 4
opt.softtabstop = 4
opt.expandtab = false
opt.hlsearch = false
opt.incsearch = true
opt.smartindent = false
opt.wrap = false

-- Leader Key Stuff:
g.mapleader = " "
#+END_SRC

** SRC/Treesitter.lua
#+BEGIN_SRC lua :tangle ~/.config/nvim/lua/src/treesitter.lua
  require'nvim-treesitter.configs'.setup {
    -- A list of parser names, or you can set it to "all"
    ensure_installed = { "bash",
	"c",  "cpp", "css",
	"gdscript", "go", "haskell",
	"lua", "make", "nix", "org",
	"python", "rust","sxhkdrc",
	"vim", "yaml"
    },

    -- Install parsers synchronously (only applied to `ensure_installed`)
    sync_install = false,

    -- Automatically install missing parsers when entering buffer
    auto_install = true,

    ---- If you need to change the installation directory of the parsers (see -> Advanced Setup)
    -- parser_install_dir = "/some/path/to/store/parsers", -- Remember to run vim.opt.runtimepath:append("/some/path/to/store/parsers")!

    highlight = {
      -- `false` will disable the whole extension
      enable = true,

      -- Setting this to true will run `:h syntax` and tree-sitter at the same time.
      -- Set this to `true` if you depend on 'syntax' being enabled (like for indentation).
      -- Using this option may slow down your editor, and you may see some duplicate highlights.
      -- Instead of true it can also be a list of languages
      additional_vim_regex_highlighting = true,
    },
  }
#+END_SRC

** SRC/Org.lua
#+BEGIN_SRC lua :tangle ~/.config/nvim/lua/src/org.lua
#+END_SRC

** PLUG/Themes.lua
#+BEGIN_SRC lua :tangle ~/.config/nvim/plug/themes.lua
  -- Variables
  local opt = vim.opt
  local cmd = vim.cmd
  local o = vim.o

  cmd("colorscheme dracula")
#+END_SRC
